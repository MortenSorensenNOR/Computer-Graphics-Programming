Software overview:

#############################################################
#                        APPLICATION                        #
#############################################################
-------------------------------------------------------------
#################### ################### ####################
#      ENGINE      # #     DISPLAY     # #  CORE UTILITIES  #
#################### ################### ####################

Application state:
- Current Render Target
- Application parameters
    * Render backend
    * Parameters for render backend, s.a. #threads for mult.thread.
    * Render Target Resolution
    * ?Enable/Disable GUI


Display overview: 
- Should be engine-backend agnostic
- Currently targeting SDL, GLFW is also possible, though then OpenGL is required

#######################################################################################
#                                       DISPLAY                                       #
#######################################################################################
---------------------------------------------------------------------------------------
###################### ################ ############################ ##################
#  INIT SDL DISPLAY  # #  INIT IMGUI  # #  RENDER FRAMEBUFFER SDL  # #  RENDER IMGUI  #
###################### ################ ############################ ##################

STATUS: DONE (✓)


Engine overview:

#######################################################################
#                               ENGINE                                #
#######################################################################
-----------------------------------------------------------------------
########### ####################### ################## ################
#  SCENE  # #  RENDERER FRONTEND  # #  ENGINE STATE  # #  GAME LOGIC  #
########### ####################### ################## ################

STATUS: STARTING WORK

typdef struct {
    SceneObject* parent;
    SceneObject** children;
    size_t num_children;

    // Object paramters 
    float pitch, yaw, roll;  // Rotation
    float sx, sy, sz;        // Scale
    float px, py, pz;        // Position

    // Computed per frame from paramters above ^
    mat4 model;
    mat4 scale;

    void* SceneObjectUpdateTransformFunction; // <--- void pointer to a function that is called when 

} SceneObject;

Scene structured as follows:

scene root ---->                    o
                                   / \
SceneObjects ---->                o   o
                                 / \   \
Parented to the one above -->   o   o   o

This way transformation matricies are propageted to children, where one complex model can 
consist of multiple sub-objects with their own transforms, like the rotor on a hellicopter.


Then the transform matricies are computed per frame using this calling convension. This is very overkill, and I should 
make all the UpdateTransform functions homogenious. I don't know why I thought this would be a good idea.

void SceneUpdateTransforms(SceneObject* root) {
    void (*UpdateTransformFunction)(SceneObject*) = root->SceneObjectUpdateTransformFunction;
    *UpdateTransformFunction(root->parent); // <-- This utilizes it's parents transform to compute it's own
    
    for (int i = 0; i < root->num_children; i++) {
        SceneUpdateTransforms(root->children[i]);
    }
}



Project file structure:

project/
│
├── src/
│   └── main.cpp
│
├── Application/
│   ├── Application.h
│   ├── Application.cpp
│   │
│   ├── Core_Utilities/
│   │
│   ├── Engine/
│   │   ├── engine.h
│   │   ├── engine.cpp
│   │   │
│   │   ├── Scene/
│   │   ├── Renderer_frontend/
│   │   └── Game_logic/
│   │
│   ├── Display/
│
└── CMakeLists.txt  


